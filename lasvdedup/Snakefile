#!/usr/bin/env python

from lasvdedup.utils.determine_duplicates import determine_duplicates

# Define these as global variables if needed, but don't mix with wildcards
SEGMENTS = config["SEGMENTS"]
OUTDIR = config["OUTDIR"]
SPECIES = config["SPECIES"]

rule all:
    input:
        duplicates=expand("{OUTDIR}/dedup/{species}-{segment}-classifications.tsv",
                         species=SPECIES, segment=SEGMENTS, OUTDIR=OUTDIR)

rule prepare_base_files:
    output:
        alignments="{OUTDIR}/raw/{species}-base-{segment}.aln",
        trees="{OUTDIR}/raw/{species}-base-{segment}.treefile"
    params:
        base_dir=config["BASE_DATA_DIR"],
        species=SPECIES  # Pass species as a parameter
    shell:
        """
        mkdir -p {OUTDIR}/raw
        echo "Processing segment {wildcards.segment} from {params.base_dir}"

        if [[ "{params.base_dir}" == http* ]]; then
            # If BASE_DATA_DIR is a URL, download the file
            echo "Downloading alignment file for {wildcards.segment}..."
            wget -O {output.alignments} "{params.base_dir}/{params.species}-{wildcards.segment}.aln" || \
            curl -o {output.alignments} "{params.base_dir}/{params.species}-{wildcards.segment}.aln" || \
            (echo "Failed to download {wildcards.segment} alignment file" && exit 1)
            echo "Alignment download complete."

            echo "Downloading tree file for {wildcards.segment}..."
            wget -O {output.trees} "{params.base_dir}/{params.species}-{wildcards.segment}.treefile" || \
            curl -o {output.trees} "{params.base_dir}/{params.species}-{wildcards.segment}.treefile" || \
            (echo "Failed to download {wildcards.segment} tree file" && exit 1)
            echo "Tree download complete."
        else
            # If BASE_DATA_DIR is a local path, copy the file
            cp "{params.base_dir}/{params.species}-{wildcards.segment}.aln" {output.alignments} || \
            (echo "Failed to copy {wildcards.segment} alignment file" && exit 1)

            cp "{params.base_dir}/{params.species}-{wildcards.segment}.treefile" {output.trees} || \
            (echo "Failed to copy {wildcards.segment} tree file" && exit 1)
        fi
        echo "Processing for segment {wildcards.segment} completed successfully."
        """

rule extract_sequences:
    output:
        "{OUTDIR}/raw/{species}-{segment}.denovo.fasta"
    input:
        contigs=config["CONTIGS_TABLE"],
        seq_data_dir=config["SEQ_DATA_DIR"],
    params:
        species=SPECIES  # Pass species as a parameter
    shell:
        """
        mkdir -p {OUTDIR}/raw
        csvtk -t filter2 -f '${{(annotation) acronym}}=="{params.species}" && ${{(annotation) segment}}=="{wildcards.segment}"' {input.contigs} | \
        cut -f1 | grep -v "_consensus" | \
        xargs -I @ find {input.seq_data_dir} -name "*@*" -type f -exec cat {{}} + > {output}
        """

rule align_sequences:
    output:
        aln="{OUTDIR}/aln/{species}-{segment}.add.denovo.aln"
    input:
        sequences=rules.extract_sequences.output[0],
        base_aln=rules.prepare_base_files.output.alignments
    params:
        threads=config["MAFFT"]["THREADS"]
    shell:
        """
        mafft --add {input.sequences} --adjustdirection --thread {params.threads} {input.base_aln} > {output.aln}
        """

rule trim_alignment:
    output:
        aln="{OUTDIR}/aln/{species}-{segment}.denovo.trimal.aln"
    input:
        rules.align_sequences.output.aln
    shell:
        """
        trimal -in {input} -out {output.aln} -automated1
        """

rule build_tree:
    output:
        tree="{OUTDIR}/iqtree-out/{species}-{segment}.denovo.trimal.treefile",
        log="{OUTDIR}/iqtree-out/{species}-{segment}.denovo.trimal.log"
    input:
        alignment=rules.trim_alignment.output.aln,
        base_tree=rules.prepare_base_files.output.trees
    params:
        prefix=lambda wildcards: f"{wildcards.OUTDIR}/iqtree-out/{wildcards.species}-{wildcards.segment}.denovo.trimal".replace(" ",""),
        model=lambda _: config["IQTREE"]["MODEL"],
        extra_args=lambda _: config["IQTREE"].get("EXTRA_PARAMS", ""),
    threads: workflow.cores/len(SEGMENTS)
    shell:
        """
        mkdir -p {wildcards.OUTDIR}/iqtree-out/
        iqtree -m {params.model} {params.extra_args} -T {threads} -g {input.base_tree} -redo -s {input.alignment} \
        -pre {params.prefix}
        """

rule determine_duplicates:
    output:
        classifications="{OUTDIR}/dedup/{species}-{segment}-classifications.tsv",
    input:
        tree=rules.build_tree.output.tree,
        sequences=rules.align_sequences.output.aln,
        table=config["CONTIGS_TABLE"]
    params:
        prefix=lambda wildcards: f"{wildcards.OUTDIR}/dedup/{wildcards.species}-{wildcards.segment}".replace(" ",""),
        segment=lambda wildcards: wildcards.segment,
    run:
        determine_duplicates(
            config=config,  # Pass full config object
            tree=input.tree,
            sequences=input.sequences,
            prefix=params.prefix,
            table=input.table,
            segment=params.segment,
        )